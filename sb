#!/bin/bash
# Statusbar generator.

tmpdir=/tmp/sb$DISPLAY  # directory for runtime files
config=~/.scripts/sb.conf  # configuration file

output=xrootname  # default output
frequency=1  # default frequency

error() {
	echo "error: $1" >&2
}

showstatus() {
	case $output in
		xrootname) xsetroot -name "$statusline" ;;
		stdout) echo "$statusline"
	esac
}

runck() {
	intv=$1 # interval in seconds
	file=$2 # update file
	[ -f "$tmpdir/$file" ] && {
		rm "$tmpdir/$file"
		return
	}
	[ "$((tick % (intv * frequency)))" = 0 ]
}

recompute() {
	statusline=
	for module in "${modules[@]}"; do
		name=${module%%:*} intv=${module#*:}
		runck "$intv" "$name" && "$name"
		if ! [ "$statusline" ]; then
			statusline=${!name}
		else
			statusline+=" | ${!name}"
		fi
	done
	statusline+=' '
}

finish() {
	rm -rf "$tmpdir"
	exit
}

modcfgck() {
	[[ $1 = *:* ]] || {
		error "invalid format: $1"
		return 1
	}
	name=${module%%:*} intv=${module#*:}
	[ "$(type -t "$name")" = function ] || {
		error "not a function: $name in $1"
		return 1
	}
	[ "$intv" -gt 0 ] || {
		error "not a positive integer: $intv in $1"
		return 1
	}
}

loadconfig() {
	source "$config" || {
		error "failed to load configuraiton from $config"
		return 1
	}
	[ "${#modules[@]}" -gt 0 ] || {
		error 'no modules configured'
		return 1
	}
	for module in "${modules[@]}"; do
		modcfgck "$module" || return
	done
	[ "$frequency" -gt 0 ] 2>/dev/null || {
		error "invalid frequency value: $frequency"
		return 1
	}
}

setup() {
	loadconfig || return
	trap '' TERM INT HUP
	mkdir "$tmpdir" 2>/dev/null || {
		error "statusbar for the display $DISPLAY is already running"
		return 1
	}
	trap finish EXIT TERM INT HUP
}

sbloop() {
	setup || return
	sleeptime=$(echo "$frequency" | awk '{print 1/$1}')
	while : ; do
		recompute
		showstatus || return
		tick=$(((tick + 1) % 1000))
		sleep "$sleeptime"
	done
}

while getopts ":xs" opt; do
	case $opt in
		x) output=xrootname ;;
		s) output=stdout ;;
		*)
			echo "usage: ${0##*/} [-xs]"
			exit 1
	esac
done

sbloop
